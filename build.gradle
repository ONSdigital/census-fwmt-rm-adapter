buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.2'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'jacoco'
    id 'com.jfrog.artifactory' version '4.8.1'
    id 'org.ajoberstar.grgit' version '3.0.0'
}

description = 'census-fwmt-tm-mocks'

version = '3.0.9-SNAPSHOT'

mainClassName = 'uk.gov.ons.census.fwmt.rmadapter.Application'

group = 'uk.gov.ons.census.fwmt'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    if (!project.hasProperty('omitSDCArtifactory')) {
        maven { url 'http://artifactory-sdc.onsdigital.uk/artifactory/libs-release' }
        maven { url 'http://artifactory-sdc.onsdigital.uk/artifactory/libs-snapshot' }
    }
    mavenCentral()
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'Git-Commit': grgit.head().getAbbreviatedId(8)
            ]
        }
    }
}

configurations {
    jaxb
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask',
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                produces(dir: sourcesDir, includes: '**/*.java')
                schema(dir: schema, includes: '**/*.xsd')
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: 'lines,vars,source',
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compile('uk.gov.ons.census.fwmt:census-fwmt-canonical:1.0.10-RELEASE')
    compile('uk.gov.ons.census.fwmt:census-fwmt-common:1.0.12-RELEASE')
    compile("uk.gov.ons.census.fwmt:census-fwmt-events:1.0.5-RELEASE")
    
    compile("com.google.guava:guava:27.0.1-jre")

    jaxb("javax.xml.bind:jaxb-api:2.3.0")
	jaxb("com.sun.xml.bind:jaxb-core:2.3.0.1")
	jaxb("com.sun.xml.bind:jaxb-impl:2.3.1")
	jaxb("com.sun.xml.bind:jaxb-xjc:2.3.1")
	jaxb("javax.activation:activation:1.1.1")
	compile("javax.xml.bind:jaxb-api:2.3.0")
	compile("com.sun.xml.bind:jaxb-core:2.3.0.1")
	compile("com.sun.xml.bind:jaxb-impl:2.3.1")
	compile("com.sun.xml.bind:jaxb-xjc:2.3.1")
	compile("javax.activation:activation:1.1.1")

    compile(files((String) genJaxb.classesDir).builtBy(genJaxb))

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-aop")
    compile("org.springframework.retry:spring-retry")

    compile("io.springfox:springfox-swagger2:2.9.2")



	compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
//    compile("com.fasterxml.jackson.core:jackson-databind")
//    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile("com.rabbitmq:amqp-client")

    compile("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude(module: "android-json")
    }
    integrationTestCompile("org.assertj:assertj-core")

    integrationTestRuntime("uk.gov.ons.fwmt:fwmt-service-mocks:1.0.1-SNAPSHOT")
}



jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)


sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

bootJar {
    baseName = 'census-fwmt-rm-adapter'
    group = 'uk.gov.ons.census.fwmt'
    version = version
    manifest {
        attributes(['Git-Commit': grgit.head().getAbbreviatedId(8),
                    'Git-Branch': grgit.branch.getCurrent().getName()], 'common')
    }
}

check.dependsOn jacocoTestReport
check.dependsOn integrationTest
check.dependsOn jacocoTestReport
integrationTest.mustRunAfter test
/*
processResources {
    filter ReplaceTokens, tokens: [
            'project.artifactId': 'name',
            'project.version'   : 'version',
            'scm.url'           : 'url',
            'buildNumber'       : 'buildnumber',
            'scmBranch'         : 'branch',
            'timestamp'         : 'timestamp',
    ]
}
*/

artifactory {
    contextUrl = System.getenv('ARTIFACTORY_URL')
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = System.getenv('ARTIFACTORY_USERNAME')
            password = System.getenv('ARTIFACTORY_PASSWORD')
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'census-fwmt-rm-adapter'
            version = version

            from components.java
        }
    }
}

artifactoryPublish {
    publications 'maven'
}
